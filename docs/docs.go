// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user-profile/": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Получает профиль пользователя по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Получить профиль пользователя",
                "responses": {
                    "200": {
                        "description": "Информация о профиле",
                        "schema": {
                            "$ref": "#/definitions/models.UserProfileOut"
                        }
                    },
                    "401": {
                        "description": "Не авторизован",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Профиль не найден",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Создает новый профиль пользователя, если он не существует",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Создает профиль пользователя",
                "parameters": [
                    {
                        "description": "Информация о профиле",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserProfileInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно создан профиль",
                        "schema": {
                            "$ref": "#/definitions/models.ProfileIdResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Не авторизован",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Удаляет профиль пользователя по его ID",
                "tags": [
                    "Profile"
                ],
                "summary": "Удалить профиль пользователя",
                "responses": {
                    "204": {
                        "description": "Профиль успешно удален",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Не авторизован",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Ошибка при удалении пользователя",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Обновляет данные профиля пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Обновить профиль пользователя",
                "parameters": [
                    {
                        "description": "Новые данные профиля",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserProfileUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Профиль успешно обновлен",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Не авторизован",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/middleware.ValidationErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "middleware.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer"
                        },
                        "fields": {
                            "description": "Поля с ошибками",
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "models.ProfileIdResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "status": {
                    "type": "integer"
                }
            }
        },
        "models.UserProfileInput": {
            "type": "object",
            "required": [
                "city",
                "first_name",
                "last_name"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                }
            }
        },
        "models.UserProfileOut": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.UserProfileUpdate": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Profile Service",
	Description:      "Сервис для управления профилем пользователя, включающий создание, обновление, удаление и получение профиля.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
